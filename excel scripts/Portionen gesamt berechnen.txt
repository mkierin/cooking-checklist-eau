function calculateTotalIngredients() {
  // Get active spreadsheet
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Access required sheets
  const checklistSheet = ss.getSheetByName("[Checkliste] Portionen gesamt");
  const orderSheet = ss.getSheetByName("Kundenbestellungen");
  const recipeSheet = ss.getSheetByName("Rezeptedatenbank");
  
  // Clear previous data in checklist sheet
  clearChecklistData(checklistSheet);
  
  // Get data from order sheet
  const orderLastRow = orderSheet.getLastRow();
  let orderData = [];
  
  if (orderLastRow > 1) {
    orderData = orderSheet.getRange("A2:C" + orderLastRow).getValues();
  } else {
    Logger.log("Order sheet is empty or only has headers");
    return;
  }
  
  // Get data from recipe database
  const recipeLastRow = recipeSheet.getLastRow();
  let recipeData = [];
  
  if (recipeLastRow > 1) {
    recipeData = recipeSheet.getRange("A2:E" + recipeLastRow).getValues();
  } else {
    Logger.log("Recipe sheet is empty or only has headers");
    return;
  }
  
  // Set headers in the checklist
  setChecklistHeaders(checklistSheet);
  
  // Transfer order data to checklist (columns A & B)
  transferOrderData(checklistSheet, orderData);
  
  // Get list of all dishes for dropdown validation
  const allDishes = getAllDishes(recipeData);
  
  // Add single dropdown in cell C2
  setDropdownInC2(checklistSheet, allDishes);
  
  // Set up the onEdit trigger to handle when a dish is selected
  setupOnEditTrigger();
}

/**
 * Clears previous data in the checklist sheet
 */
function clearChecklistData(sheet) {
  const lastRow = Math.max(sheet.getLastRow(), 2);
  const lastCol = Math.max(sheet.getLastColumn(), 6); // Ensure we have at least 6 columns
  
  // Store column widths before clearing
  const columnWidths = [];
  for (let col = 1; col <= lastCol; col++) {
    columnWidths.push(sheet.getColumnWidth(col));
  }
  
  // Clear content but leave the first row (headers)
  if (lastRow > 1 && lastCol >= 1) {
    sheet.getRange(2, 1, lastRow - 1, lastCol).clearContent();
    
    // Clear any existing data validations
    sheet.getRange(2, 3, lastRow - 1, 1).setDataValidation(null);
  }
  
  // Restore column widths
  for (let col = 1; col <= lastCol; col++) {
    if (columnWidths[col-1]) {
      sheet.setColumnWidth(col, columnWidths[col-1]);
    }
  }
}

/**
 * Sets headers in the checklist sheet
 */
function setChecklistHeaders(sheet) {
  // Store the current header formatting
  const headerRange = sheet.getRange("A1:F1");
  const headerBackgrounds = headerRange.getBackgrounds();
  const headerFontColors = headerRange.getFontColors();
  const headerFontFamilies = headerRange.getFontFamilies();
  const headerFontSizes = headerRange.getFontSizes();
  const headerFontWeights = headerRange.getFontWeights();
  
  // Set header values without changing formatting
  const currentValues = headerRange.getValues()[0];
  const newValues = ["Gericht", "Anzahl Bestellungen", "Gericht auswÃ¤hlen", "Zutat", "Bruttogewicht (g/Portion)", "Gesamtmenge (kg)"];
  
  // Only update values if they're different to avoid unnecessary sheet changes
  let needsUpdate = false;
  for (let i = 0; i < currentValues.length; i++) {
    if (currentValues[i] !== newValues[i]) {
      needsUpdate = true;
      break;
    }
  }
  
  if (needsUpdate) {
    headerRange.setValues([newValues]);
    
    // Restore the header formatting
    headerRange.setBackgrounds(headerBackgrounds);
    headerRange.setFontColors(headerFontColors);
    headerRange.setFontFamilies(headerFontFamilies);
    headerRange.setFontSizes(headerFontSizes);
    headerRange.setFontWeights(headerFontWeights);
  }
  
  // Don't auto-resize columns - keep current widths
}

/**
 * Gets list of all unique dishes from recipe database for dropdown
 */
function getAllDishes(recipeData) {
  const dishes = [];
  const dishIds = {};
  
  for (let i = 0; i < recipeData.length; i++) {
    // Check if this is a main recipe entry (not an ingredient line)
    if (recipeData[i][0] && !recipeData[i][0].toString().trim().startsWith("Gesamt")) {
      // Use Gericht-ID as key to prevent duplicates
      const gerichtId = recipeData[i][1];
      if (gerichtId && !dishIds[gerichtId]) {
        dishes.push(recipeData[i][0]);
        dishIds[gerichtId] = true;
      }
    }
  }
  
  return dishes;
}

/**
 * Transfers order data to checklist (columns A & B)
 */
function transferOrderData(checklistSheet, orderData) {
  const orders = [];
  
  for (let i = 0; i < orderData.length; i++) {
    if (orderData[i][0] && orderData[i][1]) {
      orders.push([orderData[i][0], orderData[i][1]]);
    }
  }
  
  // Only attempt to set values if we have data to set
  if (orders.length > 0) {
    checklistSheet.getRange(2, 1, orders.length, 2).setValues(orders);
  } else {
    Logger.log("No order data found to transfer");
  }
}

/**
 * Sets dropdown in cell C2 only
 */
function setDropdownInC2(sheet, dishes) {
  // Create validation rule
  const rule = SpreadsheetApp.newDataValidation()
    .requireValueInList(dishes, true)
    .build();
  
  // Apply validation to cell C2 only
  sheet.getRange("C2").setDataValidation(rule);
}

/**
 * Sets up an onEdit trigger to handle when a dish is selected
 */
function setupOnEditTrigger() {
  // Delete any existing triggers
  const allTriggers = ScriptApp.getProjectTriggers();
  for (let i = 0; i < allTriggers.length; i++) {
    if (allTriggers[i].getHandlerFunction() === "onEditHandler") {
      ScriptApp.deleteTrigger(allTriggers[i]);
    }
  }
  
  // Create a new trigger
  ScriptApp.newTrigger("onEditHandler")
    .forSpreadsheet(SpreadsheetApp.getActive())
    .onEdit()
    .create();
}

/**
 * Handler for the onEdit trigger
 */
function onEditHandler(e) {
  // Check if the edit was in the checklist sheet and in cell C2
  const sheet = e.source.getActiveSheet();
  if (sheet.getName() === "[Checkliste] Portionen gesamt" && e.range.getA1Notation() === "C2") {
    populateIngredientsForSelectedDish(e.value);
  }
}

/**
 * Populates ingredients for the selected dish
 */
function populateIngredientsForSelectedDish(dishName) {
  if (!dishName) return;
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const checklistSheet = ss.getSheetByName("[Checkliste] Portionen gesamt");
  const recipeSheet = ss.getSheetByName("Rezeptedatenbank");
  const orderSheet = ss.getSheetByName("Kundenbestellungen");
  
  // Get all data from recipe sheet
  const recipeData = recipeSheet.getDataRange().getValues();
  
  // Get all data from order sheet (including Gericht-ID in column C)
  const fullOrderData = orderSheet.getDataRange().getValues();
  
  // Find ingredients for the selected dish
  const ingredients = getIngredientsForRecipe(recipeData, dishName);
  
  // Clear previous ingredients
  clearIngredientRows(checklistSheet);
  
  // Get Gericht-ID for the selected dish from recipe database
  let dishId = null;
  for (let i = 0; i < recipeData.length; i++) {
    if (recipeData[i][0] === dishName) {
      dishId = recipeData[i][1]; // Gericht-ID in column B of recipe data
      break;
    }
  }
  
  // Find the order quantity based on Gericht-ID
  let orderQuantity = 0;
  
  if (dishId) {
    // Look for this ID in the orders data
    for (let i = 1; i < fullOrderData.length; i++) { // Skip header row
      if (fullOrderData[i][2] === dishId) { // Gericht-ID in column C of order data
        orderQuantity = fullOrderData[i][1]; // Order quantity in column B of order data
        Logger.log(`Found dish ${dishName} with ID ${dishId}, quantity: ${orderQuantity}`);
        break;
      }
    }
  }
  
  // Populate ingredients in the checklist
  if (ingredients.length > 0) {
    // Prepare data to write
    const ingredientData = [];
    for (let i = 0; i < ingredients.length; i++) {
      // Calculate total amount in kg (amount per portion * order quantity / 1000)
      // Parse amount as number to ensure correct calculation
      const amount = parseFloat(ingredients[i].amount) || 0;
      const quantity = parseFloat(orderQuantity) || 0;
      const totalAmount = (amount * quantity) / 1000;
      
      // Add row data [zutat, amount per portion, total amount in kg]
      ingredientData.push([ingredients[i].name, ingredients[i].amount, totalAmount]);
    }
    
    // Write data to sheet
    if (ingredientData.length > 0) {
      checklistSheet.getRange(3, 4, ingredientData.length, 3).setValues(ingredientData);
      
      // Format the total amount column as number with 2 decimal places
      checklistSheet.getRange(3, 6, ingredientData.length, 1).setNumberFormat("0.00");
    }
  }
}

/**
 * Clears previous ingredient rows in the checklist
 */
function clearIngredientRows(sheet) {
  const lastRow = sheet.getLastRow();
  if (lastRow > 2) {
    // Store formatting before clearing
    const range = sheet.getRange(3, 4, lastRow - 2, 3);
    const fontFamilies = range.getFontFamilies();
    const fontSizes = range.getFontSizes();
    const fontColors = range.getFontColors();
    const backgrounds = range.getBackgrounds();
    const fontWeights = range.getFontWeights();
    const numberFormats = range.getNumberFormats();
    
    // Clear content
    range.clearContent();
    
    // Restore formatting
    range.setFontFamilies(fontFamilies);
    range.setFontSizes(fontSizes);
    range.setFontColors(fontColors);
    range.setBackgrounds(backgrounds);
    range.setFontWeights(fontWeights);
    range.setNumberFormats(numberFormats);
  }
}

/**
 * Gets all ingredients for a recipe
 */
function getIngredientsForRecipe(recipeData, recipeName) {
  const ingredients = [];
  let recipeFound = false;
  
  for (let i = 0; i < recipeData.length; i++) {
    if (recipeData[i][0] === recipeName) {
      // Found the recipe, start collecting ingredients
      recipeFound = true;
      // Add the first ingredient that's on the same line as the recipe name
      if (recipeData[i][2] && recipeData[i][2] !== "Gesamtgewicht") {
        ingredients.push({
          name: recipeData[i][2],
          amount: recipeData[i][4]
        });
      }
    } 
    else if (recipeFound && recipeData[i][0] === "") {
      // Empty cell in column A, still part of the same recipe
      // Skip "Gesamtgewicht" rows
      if (recipeData[i][2] && recipeData[i][2] !== "Gesamtgewicht") {
        ingredients.push({
          name: recipeData[i][2],
          amount: recipeData[i][4]
        });
      }
    } 
    else if (recipeFound && recipeData[i][0] !== "") {
      // Found the next recipe, stop collecting
      break;
    }
  }
  
  return ingredients;
}

/**
 * Manual function to populate ingredients for testing
 */
function manuallyPopulateIngredients() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const checklistSheet = ss.getSheetByName("[Checkliste] Portionen gesamt");
  const dishName = checklistSheet.getRange("C2").getValue();
  
  if (dishName) {
    populateIngredientsForSelectedDish(dishName);
  }
}