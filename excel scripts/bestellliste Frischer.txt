/**
 * frischer_bestellung.gs - Automatisierte Bestellungen für den Lieferanten "Frischer"
 * 
 * Dieses Script gleicht Zutaten aus dem Bestelltool mit den Produkten von Frischer ab
 * und trägt passende Produkte in das Sheet "Bestellliste Frischer" ein.
 */

// Konfiguration
const FRISCHER_CONFIG = {
  // Sheet-Namen
  orderToolSheetName: "Bestelltool",         // Sheet mit den Gesamtbestellmengen
  frischerRawSheetName: "[raw] Frischer",    // Raw-Daten des Lieferanten Frischer
  frischerOrderSheetName: "Bestellliste Frischer", // Ausgabe-Sheet für Frischer-Bestellungen
  
  // Struktur des Bestelltools
  orderToolColumns: {
    ingredientName: 1,    // Spalte A - Zutatennname
    quantity: 2,          // Spalte B - Bestellmenge in g
    unit: 3               // Spalte C - Einheit (falls vorhanden)
  },
  
  // Struktur des Frischer Raw-Sheets
  frischerRawColumns: {
    articleNumber: 1,     // Spalte A - Artikelnummer
    productName: 2,       // Spalte B - Produktbezeichnung
    origin: 3,            // Spalte C - Herkunft
    packaging: 4,         // Spalte D - Verpackungseinheit
    weight: 5,            // Spalte E - Einzelgewicht
    price: 6              // Spalte F - Preis pro kg
  },
  
  // Struktur des Frischer Bestelllisten-Sheets
  frischerOrderColumns: {
    zutat: 1,             // Spalte A - Zutat
    mengeInKg: 2          // Spalte B - Menge in kg (statt Standard Name)
  }
};


/**
 * Hauptfunktion zum Aktualisieren der Frischer-Bestellung
 */
function updateFrischerOrder() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Sheets laden
    const orderToolSheet = ss.getSheetByName(FRISCHER_CONFIG.orderToolSheetName);
    if (!orderToolSheet) {
      throw new Error(`Sheet "${FRISCHER_CONFIG.orderToolSheetName}" nicht gefunden!`);
    }
    
    const frischerRawSheet = ss.getSheetByName(FRISCHER_CONFIG.frischerRawSheetName);
    if (!frischerRawSheet) {
      throw new Error(`Sheet "${FRISCHER_CONFIG.frischerRawSheetName}" nicht gefunden!`);
    }
    
    const frischerOrderSheet = ss.getSheetByName(FRISCHER_CONFIG.frischerOrderSheetName);
    if (!frischerOrderSheet) {
      throw new Error(`Sheet "${FRISCHER_CONFIG.frischerOrderSheetName}" nicht gefunden!`);
    }
    
    // Daten aus dem Bestelltool laden
    const orderToolData = orderToolSheet.getDataRange().getValues();
    // Die erste Zeile enthält die Überschriften
    const orderToolHeaders = orderToolData[0];
    const ingredients = orderToolData.slice(1).filter(row => row[0]); // Nur Zeilen mit Werten in Spalte A
    
    // Daten aus dem Frischer Raw-Sheet laden
    const frischerData = frischerRawSheet.getDataRange().getValues();
    // Die erste Zeile enthält die Überschriften
    const frischerHeaders = frischerData[0];
    const frischerProducts = frischerData.slice(1).filter(row => row[0]); // Nur Zeilen mit Artikelnummer
    
    // Matching-Tabelle erstellen (Lookup für schnelleren Zugriff)
    const frischerProductsMap = createFrischerProductsMap(frischerProducts);
    
    // Bestellliste Frischer Sheet zurücksetzen, aber Überschriften beibehalten
    resetFrischerOrderSheet(frischerOrderSheet);
    
    // Für jede Zutat im Bestelltool prüfen, ob es ein passendes Frischer-Produkt gibt
    let rowIndex = 2; // Start bei Zeile 2, da Zeile 1 die Überschriften enthält
    for (const ingredient of ingredients) {
      const internalName = ingredient[FRISCHER_CONFIG.orderToolColumns.ingredientName - 1];
      const quantity = ingredient[FRISCHER_CONFIG.orderToolColumns.quantity - 1];
      
      if (!internalName || !quantity) continue;
      
      // Passendes Frischer-Produkt suchen
      const matchingProduct = findMatchingFrischerProduct(internalName, frischerProductsMap);
      
      if (matchingProduct) {
        // Eintrag in die Frischer-Bestellliste
        frischerOrderSheet.getRange(rowIndex, FRISCHER_CONFIG.frischerOrderColumns.zutat).setValue(internalName);
        
        // Menge in kg berechnen (Menge in g / 1000) mit 3 Dezimalstellen
        const mengeInKg = Number(quantity) / 1000;
        
        // Formatierung als Zahl mit 3 Dezimalstellen
        frischerOrderSheet.getRange(rowIndex, FRISCHER_CONFIG.frischerOrderColumns.mengeInKg).setValue(mengeInKg);
        
        rowIndex++;
      }
    }
    
  } catch (error) {
    SpreadsheetApp.getUi().alert('Fehler: ' + error.message);
    console.error('Fehler in updateFrischerOrder:', error);
  }
}

/**
 * Erstellt eine Map mit Frischer-Produkten für schnellen Lookup
 * @param {Array} frischerProducts - Die Produktdaten von Frischer
 * @return {Object} - Map mit normalisierten Produktnamen als Keys
 */
function createFrischerProductsMap(frischerProducts) {
  const productsMap = {};
  
  for (const product of frischerProducts) {
    const articleNumber = product[FRISCHER_CONFIG.frischerRawColumns.articleNumber - 1];
    const productName = product[FRISCHER_CONFIG.frischerRawColumns.productName - 1];
    
    if (articleNumber && productName) {
      // Sowohl Original-Name als auch normalisierte Version als Keys verwenden
      // für bessere Matching-Chancen
      productsMap[normalizeStringFrischer(productName)] = {
        articleNumber: articleNumber,
        productName: productName,
        originalRow: product
      };
      
      // Auch direkt den Original-Namen als Key hinzufügen
      productsMap[productName] = {
        articleNumber: articleNumber,
        productName: productName,
        originalRow: product
      };
    }
  }
  
  return productsMap;
}

/**
 * Sucht ein passendes Frischer-Produkt für den internen Namen
 * @param {string} internalName - Die interne Bezeichnung aus dem Bestelltool
 * @param {Object} frischerProductsMap - Die Map mit Frischer-Produkten
 * @return {Object|null} - Das matching Produkt oder null, wenn keins gefunden
 */
function findMatchingFrischerProduct(internalName, frischerProductsMap) {
  // 1. Exakte Übereinstimmung versuchen
  if (frischerProductsMap[internalName]) {
    return frischerProductsMap[internalName];
  }
  
  // 2. Normalisierte Übereinstimmung versuchen
  const normalizedName = normalizeStringFrischer(internalName);
  if (frischerProductsMap[normalizedName]) {
    return frischerProductsMap[normalizedName];
  }
  
  // 3. Fuzzy-Matching versuchen
  const keys = Object.keys(frischerProductsMap);
  
  // Erst nach Teil-Strings suchen (ein String enthält den anderen)
  for (const key of keys) {
    if (key.includes(normalizedName) || normalizedName.includes(key)) {
      return frischerProductsMap[key];
    }
  }
  
  // Dann nach Wort-Überschneidungen suchen
  const internalWords = normalizedName.split(/\s+/);
  
  for (const key of keys) {
    const keyWords = key.split(/\s+/);
    
    // Prüfen, ob mindestens ein signifikantes Wort übereinstimmt
    const hasCommonWord = internalWords.some(word => 
      word.length > 3 && keyWords.some(keyWord => keyWord === word)
    );
    
    if (hasCommonWord) {
      return frischerProductsMap[key];
    }
  }
  
  // Kein Match gefunden
  return null;
}

/**
 * Normalisiert einen String für besseres Matching
 * - Umlaute ersetzen
 * - Kleinbuchstaben
 * - Leerzeichen und Sonderzeichen entfernen
 */
function normalizeStringFrischer(str) {
  if (!str) return '';
  
  return str.toString()
    .toLowerCase()
    .trim()
    .replace(/ä/g, 'a')
    .replace(/ö/g, 'o')
    .replace(/ü/g, 'u')
    .replace(/ß/g, 'ss')
    .replace(/é/g, 'e')
    .replace(/è/g, 'e')
    .replace(/ê/g, 'e')
    .replace(/à/g, 'a')
    .replace(/[^a-z0-9]/g, ''); // Nur Buchstaben und Zahlen behalten
}

/**
 * Setzt das Frischer Bestelllisten-Sheet zurück (löscht alle Daten außer Überschriften)
 */
function resetFrischerOrderSheet(sheet) {
  // Anzahl der Zeilen und Spalten ermitteln
  const lastRow = sheet.getLastRow();
  const lastColumn = sheet.getLastColumn();
  
  // Wenn es Daten gibt (mehr als nur die Überschriftenzeile)
  if (lastRow > 1) {
    // Alle Zellen außer der ersten Zeile löschen
    sheet.getRange(2, 1, lastRow - 1, lastColumn).clearContent();
  }
  
  // Sicherstellen, dass die Überschriften korrekt sind
  sheet.getRange(1, FRISCHER_CONFIG.frischerOrderColumns.zutat).setValue('Zutat');
  sheet.getRange(1, FRISCHER_CONFIG.frischerOrderColumns.mengeInKg).setValue('Menge in kg');
}

/**
 * Testet die Matching-Funktion mit einem bestimmten Zutatennamen
 * Hilfsfunktion für Debug-Zwecke
 */
function testFrischerMatching() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const frischerRawSheet = ss.getSheetByName(FRISCHER_CONFIG.frischerRawSheetName);
  const frischerData = frischerRawSheet.getDataRange().getValues();
  const frischerProducts = frischerData.slice(1).filter(row => row[0]);
  
  const frischerProductsMap = createFrischerProductsMap(frischerProducts);
  
  // Testbeispiel
  const testIngredient = "Zwiebeln";
  const match = findMatchingFrischerProduct(testIngredient, frischerProductsMap);
  
  if (match) {
    console.log(`Match gefunden für "${testIngredient}": ${match.productName} (${match.articleNumber})`);
  } else {
    console.log(`Kein Match gefunden für "${testIngredient}"`);
  }
}